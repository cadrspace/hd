#!/usr/bin/ruby
# -*- coding: utf-8 -*-

### hd -- HackDepot console client.

# Copyright (C) 2016 Artyom V. Poptsov <poptsov.artyom@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


### Commentary:

# Usage examples:
#
#   Get list of all item IDs:
#   ./hd -u $EMAIL -p $PASSWORD item
#
#   Get information about an item by its ID:
#   ./hd -u $EMAIL -p $PASSWORD item 562dee846d986e7c88000000

### Code:

require 'rest-client'
require 'json'
require 'optparse'

$options = {}

opt_parser = OptionParser.new do |opt|
  opt.on("-u", "--user=USER", "Set user name.") do |user|
    $options[:user] = user
  end
  opt.on("-p", "--password=PASSWORD", "Set password.") do |password|
    $options[:password] = password
  end
end

opt_parser.parse!


# HackDepot instance domain name.
HACKDEPOT_INSTANCE = 'hd.cadr.nntc.nnov.ru'
API_VERSION = "v1"
API_BASE_URL = "https://#{HACKDEPOT_INSTANCE}/api/#{API_VERSION}"


### Helper methods

# Authenticate with a EMAIL and PASSWORD, return authentication
# response.
def authenticate(email, password)
  request_body_map = {
    :email => email,
    :password => password
  }

  RestClient.post("#{API_BASE_URL}/auth/sign_in",
                  request_body_map.to_json,
                  {:content_type => 'application/json',
                   :accept => 'application/json'})
end

# Get IDs of all items registered in HackDepot.  Use ACCESS_TOKEN,
# EXPIRY and CLIENT for authentication.
def get_all_items(access_token, expiry, client)
  RestClient.get("#{API_BASE_URL}/items",
                 {
                   :content_type => 'application/json',
                   :accept => 'application/json',
                   :access_token => access_token,
                   :token_type => "Bearer",
                   :expiry => expiry,
                   :client => client,
                   :uid => $options[:user]
                 })
end

# Get information about item with ID.  Use ACCESS_TOKEN, EXPIRY and
# CLIENT for authentication.
def get_item(id, access_token, expiry, client)
  RestClient.get("#{API_BASE_URL}/items/#{id}",
                 {
                   :content_type => 'application/json',
                   :accept => 'application/json',
                   :access_token => access_token,
                   :token_type => "Bearer",
                   :expiry => expiry,
                   :client => client,
                   :uid => $options[:user]
                 })
end

# Print IDs of items from an ARRAY to stdout.
def print_item_list(array)
  max_title_len = array.inject(20) do |p, e|
    e['title'].length > p ? e['title'].length : p
  end

  array.each { |elem|
    sn = elem['serial']
    printf "%s: %-#{max_title_len}s %s\n",
           elem['id']['$oid'],
           elem['title'],
           if not sn == nil and not sn.empty?
             " (S/N: #{sn})"
           else
             ""
           end
  }
end


###

# Handle "item" command.
def handle_item
  auth_rsp = authenticate $options[:user], $options[:password]

  if not ARGV[1] == nil
    rsp = get_item ARGV[1],
                   auth_rsp.headers[:access_token],
                   auth_rsp.headers[:expiry],
                   auth_rsp.headers[:client]
    puts rsp
  else
    rsp = get_all_items auth_rsp.headers[:access_token],
                        auth_rsp.headers[:expiry],
                        auth_rsp.headers[:client]

    print_item_list JSON.parse(rsp.body)
  end
end

def print_help_and_exit
  puts "\
Usage: hd command [args]

Options:
  -u, --user=USER        User name for authenticaton.
  -p, --password=PASSWORD
                         Password for authentication.
Commands:
  item        Query HackDepot instance for items.
  help        Print this message and exit.
"
  exit
end


### Entry point

def main
  case ARGV[0]
  when "item"
    handle_item
  else
    print_help_and_exit
  end
end

main

### hd ends here.
